{"version":3,"file":"static/js/331.57bdfee7.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/Login.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport { useConstCallback } from \"powerhooks/useConstCallback\";\nimport type { FormEventHandler } from \"react\";\nimport type { I18n } from \"../i18n\";\n\nconst Login = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.Login; i18n: I18n } & KcProps) => {\n    const { social, realm, url, usernameEditDisabled, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx } = useCssAndCx();\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            formNode={\n                <div id=\"kc-form\" className={cx(realm.password && social.providers !== undefined && props.kcContentWrapperClass)}>\n                    <div\n                        id=\"kc-form-wrapper\"\n                        className={cx(realm.password && social.providers && [props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass])}\n                    >\n                        {realm.password && (\n                            <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                                <div className={cx(props.kcFormGroupClass)}>\n                                    {(() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                            ? \"email\"\n                                            : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <>\n                                                <label htmlFor={autoCompleteHelper} className={cx(props.kcLabelClass)}>\n                                                    {msg(label)}\n                                                </label>\n                                                <input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={cx(props.kcInputClass)}\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                    //the browser how to pre fill the form but before submit we put it back\n                                                    //to username because it is what keycloak expects.\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    {...(usernameEditDisabled\n                                                        ? { \"disabled\": true }\n                                                        : {\n                                                              \"autoFocus\": true,\n                                                              \"autoComplete\": \"off\"\n                                                          })}\n                                                />\n                                            </>\n                                        );\n                                    })()}\n                                </div>\n                                <div className={cx(props.kcFormGroupClass)}>\n                                    <label htmlFor=\"password\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                    <input\n                                        tabIndex={2}\n                                        id=\"password\"\n                                        className={cx(props.kcInputClass)}\n                                        name=\"password\"\n                                        type=\"password\"\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n                                <div className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                                    <div id=\"kc-form-options\">\n                                        {realm.rememberMe && !usernameEditDisabled && (\n                                            <div className=\"checkbox\">\n                                                <label>\n                                                    <input\n                                                        tabIndex={3}\n                                                        id=\"rememberMe\"\n                                                        name=\"rememberMe\"\n                                                        type=\"checkbox\"\n                                                        {...(login.rememberMe\n                                                            ? {\n                                                                  \"checked\": true\n                                                              }\n                                                            : {})}\n                                                    />\n                                                    {msg(\"rememberMe\")}\n                                                </label>\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                        {realm.resetPasswordAllowed && (\n                                            <span>\n                                                <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                    {msg(\"doForgotPassword\")}\n                                                </a>\n                                            </span>\n                                        )}\n                                    </div>\n                                </div>\n                                <div id=\"kc-form-buttons\" className={cx(props.kcFormGroupClass)}>\n                                    <input\n                                        type=\"hidden\"\n                                        id=\"id-hidden-input\"\n                                        name=\"credentialId\"\n                                        {...(auth?.selectedCredential !== undefined\n                                            ? {\n                                                  \"value\": auth.selectedCredential\n                                              }\n                                            : {})}\n                                    />\n                                    <input\n                                        tabIndex={4}\n                                        className={cx(\n                                            props.kcButtonClass,\n                                            props.kcButtonPrimaryClass,\n                                            props.kcButtonBlockClass,\n                                            props.kcButtonLargeClass\n                                        )}\n                                        name=\"login\"\n                                        id=\"kc-login\"\n                                        type=\"submit\"\n                                        value={msgStr(\"doLogIn\")}\n                                        disabled={isLoginButtonDisabled}\n                                    />\n                                </div>\n                            </form>\n                        )}\n                    </div>\n                    {realm.password && social.providers !== undefined && (\n                        <div id=\"kc-social-providers\" className={cx(props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass)}>\n                            <ul\n                                className={cx(\n                                    props.kcFormSocialAccountListClass,\n                                    social.providers.length > 4 && props.kcFormSocialAccountDoubleListClass\n                                )}\n                            >\n                                {social.providers.map(p => (\n                                    <li key={p.providerId} className={cx(props.kcFormSocialAccountListLinkClass)}>\n                                        <a href={p.loginUrl} id={`zocial-${p.alias}`} className={cx(\"zocial\", p.providerId)}>\n                                            <span>{p.displayName}</span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </div>\n            }\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        />\n    );\n});\n\nexport default Login;\n"],"names":["Login","memo","_a","kcContext","i18n","props","__rest","social","realm","url","usernameEditDisabled","login","auth","registrationDisabled","msg","msgStr","cx","useCssAndCx","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","setAttribute","submit","React","Template","Object","doFetchDefaultThemeResources","displayInfo","displayWide","password","undefined","providers","headerNode","formNode","id","className","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","tabIndex","kcInputClass","name","defaultValue","username","type","autoComplete","kcFormSettingClass","rememberMe","kcFormOptionsWrapperClass","resetPasswordAllowed","href","loginResetCredentialsUrl","selectedCredential","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","disabled","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","key","providerId","kcFormSocialAccountListLinkClass","loginUrl","alias","displayName","infoNode","registrationAllowed","registrationUrl"],"sourceRoot":""}