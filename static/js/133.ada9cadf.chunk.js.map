{"version":3,"file":"static/js/133.ada9cadf.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/Register.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\n\nconst Register = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.Register; i18n: I18n } & KcProps) => {\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx } = useCssAndCx();\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={cx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={cx(props.kcInputClass)}\n                                name=\"firstName\"\n                                defaultValue={register.formData.firstName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={cx(props.kcInputClass)}\n                                name=\"lastName\"\n                                defaultValue={register.formData.lastName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"email\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={cx(props.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className={cx(props.kcInputClass)}\n                                name=\"email\"\n                                defaultValue={register.formData.email ?? \"\"}\n                                autoComplete=\"email\"\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"username\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={cx(props.kcInputClass)}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password\", props.kcFormGroupErrorClass))}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={cx(props.kcInputClass)}\n                                        name=\"password\"\n                                        autoComplete=\"new-password\"\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={cx(\n                                    props.kcFormGroupClass,\n                                    messagesPerField.printIfExists(\"password-confirm\", props.kcFormGroupErrorClass)\n                                )}\n                            >\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password-confirm\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"passwordConfirm\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input type=\"password\" id=\"password-confirm\" className={cx(props.kcInputClass)} name=\"password-confirm\" />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default Register;\n"],"names":["Register","memo","_a","kcContext","i18n","props","__rest","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","cx","useCssAndCx","React","Template","Object","doFetchDefaultThemeResources","headerNode","formNode","id","className","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","_b","lastName","_c","email","_d","autoComplete","registrationEmailAsUsername","username","_e","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value"],"sourceRoot":""}