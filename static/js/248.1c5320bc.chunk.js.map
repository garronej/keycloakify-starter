{"version":3,"file":"static/js/248.1c5320bc.chunk.js","mappings":"ofAOMA,GAAqBC,EAAAA,EAAAA,OAAK,SAACC,G,IAAEC,EAAeD,EAAfC,UAAWC,EAAIF,EAAJE,KAASC,EAAKC,EAAAA,EAA3B,sBACrBC,EAAqBJ,EAArBI,IAAKC,EAAgBL,EAAhBK,MAAOC,EAASN,EAATM,KAEZC,EAAgBN,EAAhBM,IAAKC,EAAWP,EAAXO,OAELC,GAAOC,EAAAA,EAAAA,KAAPD,GAER,OACIE,EAAAA,cAACC,EAAAA,EAAQC,OAAAA,OAAAA,CAAAA,EAAAA,OAAAA,OAAAA,CACCb,UAAAA,EAAWC,KAAAA,GAASC,GAAK,CAC/BY,8BAA8B,EAC9BC,gBAAgB,EAChBC,WAAYT,EAAI,oBAChBU,SACIN,EAAAA,cAAAA,OAAAA,CAAMO,GAAG,yBAAyBC,UAAWV,EAAGP,EAAMkB,aAAcC,OAAQjB,EAAIkB,YAAaC,OAAO,QAChGZ,EAAAA,cAAAA,MAAAA,CAAKQ,UAAWV,EAAGP,EAAMsB,mBACrBb,EAAAA,cAAAA,MAAAA,CAAKQ,UAAWV,EAAGP,EAAMuB,sBACrBd,EAAAA,cAAAA,QAAAA,CAAOe,QAAQ,WAAWP,UAAWV,EAAGP,EAAMyB,eACxCtB,EAAMuB,sBAEDvB,EAAMwB,4BAEPtB,EAAI,SADJA,EAAI,mBAFJA,EAAI,cAMlBI,EAAAA,cAAAA,MAAAA,CAAKQ,UAAWV,EAAGP,EAAM4B,sBACrBnB,EAAAA,cAAAA,QAAAA,CACIoB,KAAK,OACLb,GAAG,WACHc,KAAK,WACLb,UAAWV,EAAGP,EAAM+B,cACpBC,WAAS,EACTC,kBAAuBC,IAAT9B,GAAsBA,EAAK+B,aAAe/B,EAAKgC,uBAAoBF,MAI7FzB,EAAAA,cAAAA,MAAAA,CAAKQ,UAAWV,EAAGP,EAAMsB,iBAAkBtB,EAAMqC,qBAC7C5B,EAAAA,cAAAA,MAAAA,CAAKO,GAAG,kBAAkBC,UAAWV,EAAGP,EAAMsC,qBAC1C7B,EAAAA,cAAAA,MAAAA,CAAKQ,UAAWV,EAAGP,EAAMuC,4BACrB9B,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAG+B,KAAMtC,EAAIuC,UAAWpC,EAAI,mBAKxCI,EAAAA,cAAAA,MAAAA,CAAKO,GAAG,kBAAkBC,UAAWV,EAAGP,EAAM0C,qBAC1CjC,EAAAA,cAAAA,QAAAA,CACIQ,UAAWV,EAAGP,EAAM2C,cAAe3C,EAAM4C,qBAAsB5C,EAAM6C,mBAAoB7C,EAAM8C,oBAC/FjB,KAAK,SACLkB,MAAOzC,EAAO,iBAMlC0C,SAAU3C,EAAI,sBAGzB,IAED,W","sources":["../node_modules/keycloakify/src/lib/components/LoginResetPassword.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\n\nconst LoginResetPassword = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.LoginResetPassword; i18n: I18n } & KcProps) => {\n    const { url, realm, auth } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx } = useCssAndCx();\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayMessage={false}\n            headerNode={msg(\"emailForgotTitle\")}\n            formNode={\n                <form id=\"kc-reset-password-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                {!realm.loginWithEmailAllowed\n                                    ? msg(\"username\")\n                                    : !realm.registrationEmailAsUsername\n                                    ? msg(\"usernameOrEmail\")\n                                    : msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                name=\"username\"\n                                className={cx(props.kcInputClass)}\n                                autoFocus\n                                defaultValue={auth !== undefined && auth.showUsername ? auth.attemptedUsername : undefined}\n                            />\n                        </div>\n                    </div>\n                    <div className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n            infoNode={msg(\"emailInstruction\")}\n        />\n    );\n});\n\nexport default LoginResetPassword;\n"],"names":["LoginResetPassword","memo","_a","kcContext","i18n","props","__rest","url","realm","auth","msg","msgStr","cx","useCssAndCx","React","Template","Object","doFetchDefaultThemeResources","displayMessage","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","kcFormGroupClass","kcLabelWrapperClass","htmlFor","kcLabelClass","loginWithEmailAllowed","registrationEmailAsUsername","kcInputWrapperClass","type","name","kcInputClass","autoFocus","defaultValue","undefined","showUsername","attemptedUsername","kcFormSettingClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","infoNode"],"sourceRoot":""}