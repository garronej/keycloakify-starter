{"version":3,"file":"static/js/248.1e5b544c.chunk.js","mappings":"qfAeMA,GAAqBC,EAAAA,EAAAA,OAAK,SAACC,GAC7B,IAAQC,EAAiGD,EAAjGC,UAAWC,EAAsFF,EAAtFE,KAAnB,EAAyGF,EAAhFG,6BAAAA,OAAzB,WAAyGH,EAA3CI,SAAAA,OAA9D,MAAyEC,EAAAA,EAAzE,EAA6FC,EAAOC,EAAKP,EAAnG,gEAEEQ,EAAqBP,EAArBO,IAAKC,EAAgBR,EAAhBQ,MAAOC,EAAST,EAATS,KAEZC,EAAgBT,EAAhBS,IAAKC,EAAWV,EAAXU,OAELC,GAAOC,EAAAA,EAAAA,KAAPD,GAER,OACIE,EAAAA,cAACX,EAAQY,OAAAA,OAAAA,CAAAA,EAAAA,OAAAA,OAAAA,CACCf,UAAAA,EAAWC,KAAAA,EAAMC,6BAAAA,GAAiCG,GAAO,CAC/DW,gBAAgB,EAChBC,WAAYP,EAAI,oBAChBQ,SACIJ,EAAAA,cAAAA,OAAAA,CAAMK,GAAG,yBAAyBC,UAAWR,EAAGP,EAAQgB,aAAcC,OAAQf,EAAIgB,YAAaC,OAAO,QAClGV,EAAAA,cAAAA,MAAAA,CAAKM,UAAWR,EAAGP,EAAQoB,mBACvBX,EAAAA,cAAAA,MAAAA,CAAKM,UAAWR,EAAGP,EAAQqB,sBACvBZ,EAAAA,cAAAA,QAAAA,CAAOa,QAAQ,WAAWP,UAAWR,EAAGP,EAAQuB,eAC1CpB,EAAMqB,sBAEDrB,EAAMsB,4BAEPpB,EAAI,SADJA,EAAI,mBAFJA,EAAI,cAMlBI,EAAAA,cAAAA,MAAAA,CAAKM,UAAWR,EAAGP,EAAQ0B,sBACvBjB,EAAAA,cAAAA,QAAAA,CACIkB,KAAK,OACLb,GAAG,WACHc,KAAK,WACLb,UAAWR,EAAGP,EAAQ6B,cACtBC,WAAS,EACTC,kBAAuBC,IAAT5B,GAAsBA,EAAK6B,aAAe7B,EAAK8B,uBAAoBF,MAI7FvB,EAAAA,cAAAA,MAAAA,CAAKM,UAAWR,EAAGP,EAAQoB,iBAAkBpB,EAAQmC,qBACjD1B,EAAAA,cAAAA,MAAAA,CAAKK,GAAG,kBAAkBC,UAAWR,EAAGP,EAAQoC,qBAC5C3B,EAAAA,cAAAA,MAAAA,CAAKM,UAAWR,EAAGP,EAAQqC,4BACvB5B,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAG6B,KAAMpC,EAAIqC,UAAWlC,EAAI,mBAKxCI,EAAAA,cAAAA,MAAAA,CAAKK,GAAG,kBAAkBC,UAAWR,EAAGP,EAAQwC,qBAC5C/B,EAAAA,cAAAA,QAAAA,CACIM,UAAWR,EACPP,EAAQyC,cACRzC,EAAQ0C,qBACR1C,EAAQ2C,mBACR3C,EAAQ4C,oBAEZjB,KAAK,SACLkB,MAAOvC,EAAO,iBAMlCwC,SAAUzC,EAAI,sBAGzB,IAED,W","sources":["../node_modules/keycloakify/src/lib/components/LoginResetPassword.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\n\nexport type LoginResetPasswordProps = KcProps & {\n    kcContext: KcContextBase.LoginResetPassword;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst LoginResetPassword = memo((props: LoginResetPasswordProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { url, realm, auth } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx } = useCssAndCx();\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayMessage={false}\n            headerNode={msg(\"emailForgotTitle\")}\n            formNode={\n                <form id=\"kc-reset-password-form\" className={cx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <div className={cx(kcProps.kcFormGroupClass)}>\n                        <div className={cx(kcProps.kcLabelWrapperClass)}>\n                            <label htmlFor=\"username\" className={cx(kcProps.kcLabelClass)}>\n                                {!realm.loginWithEmailAllowed\n                                    ? msg(\"username\")\n                                    : !realm.registrationEmailAsUsername\n                                    ? msg(\"usernameOrEmail\")\n                                    : msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(kcProps.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                name=\"username\"\n                                className={cx(kcProps.kcInputClass)}\n                                autoFocus\n                                defaultValue={auth !== undefined && auth.showUsername ? auth.attemptedUsername : undefined}\n                            />\n                        </div>\n                    </div>\n                    <div className={cx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\n                        <div id=\"kc-form-options\" className={cx(kcProps.kcFormOptionsClass)}>\n                            <div className={cx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={cx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n            infoNode={msg(\"emailInstruction\")}\n        />\n    );\n});\n\nexport default LoginResetPassword;\n"],"names":["LoginResetPassword","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","__rest","url","realm","auth","msg","msgStr","cx","useCssAndCx","React","Object","displayMessage","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","kcFormGroupClass","kcLabelWrapperClass","htmlFor","kcLabelClass","loginWithEmailAllowed","registrationEmailAsUsername","kcInputWrapperClass","type","name","kcInputClass","autoFocus","defaultValue","undefined","showUsername","attemptedUsername","kcFormSettingClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","infoNode"],"sourceRoot":""}