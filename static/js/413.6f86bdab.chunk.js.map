{"version":3,"file":"static/js/413.6f86bdab.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/RegisterUserProfile.tsx"],"sourcesContent":["import React, { useMemo, memo, useEffect, useState, Fragment } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase, Attribute } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"tss-react\";\nimport type { ReactComponent } from \"../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../useFormValidationSlice\";\nimport type { I18n } from \"../i18n\";\n\nconst RegisterUserProfile = memo(({ kcContext, i18n, ...props_ }: { kcContext: KcContextBase.RegisterUserProfile; i18n: I18n } & KcProps) => {\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx, css } = useCssAndCx();\n\n    const props = useMemo(\n        () => ({\n            ...props_,\n            \"kcFormGroupClass\": cx(props_.kcFormGroupClass, css({ \"marginBottom\": 20 }))\n        }),\n        [cx, css]\n    );\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={cx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...props} />\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\ntype UserProfileFormFieldsProps = { kcContext: KcContextBase.RegisterUserProfile; i18n: I18n } & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nconst UserProfileFormFields = memo(({ kcContext, onIsFormSubmittableValueChange, i18n, ...props }: UserProfileFormFieldsProps) => {\n    const { cx, css } = useCssAndCx();\n\n    const { advancedMsg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationReducer,\n        attributesWithPassword\n    } = useFormValidationSlice({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    const onChangeFactory = useCallbackFactory(\n        (\n            [name]: [string],\n            [\n                {\n                    target: { value }\n                }\n            ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n        ) =>\n            formValidationReducer({\n                \"action\": \"update value\",\n                name,\n                \"newValue\": value\n            })\n    );\n\n    const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n        formValidationReducer({\n            \"action\": \"focus lost\",\n            name\n        })\n    );\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = cx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={cx(props.kcContentWrapperClass)}>\n                                    <label id={`header-${group}`} className={cx(props.kcFormGroupHeader)}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={cx(props.kcLabelWrapperClass)}>\n                                        <label id={`description-${group}`} className={`${cx(props.kcLabelClass)}`}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                        <div className={formGroupClassName}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor={attribute.name} className={cx(props.kcLabelClass)}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                                value={value}\n                                            >\n                                                {options.options.map(option => (\n                                                    <option key={option} value={option}>\n                                                        {option}\n                                                    </option>\n                                                ))}\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={onChangeFactory(attribute.name)}\n                                            className={cx(props.kcInputClass)}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                            onBlur={onBlurFactory(attribute.name)}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 && (\n                                    <span\n                                        id={`input-error-${attribute.name}`}\n                                        className={cx(\n                                            props.kcInputErrorMessageClass,\n                                            css({\n                                                \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined,\n                                                \"& > span\": { \"display\": \"block\" }\n                                            })\n                                        )}\n                                        aria-live=\"polite\"\n                                    >\n                                        {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n});\n\nexport default RegisterUserProfile;\n"],"names":["RegisterUserProfile","memo","kcContext","i18n","props_","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useCssAndCx","cx","css","props","useMemo","kcFormGroupClass","useState","isFomSubmittable","setIsFomSubmittable","React","Template","displayMessage","exists","displayRequiredFields","doFetchDefaultThemeResources","headerNode","formNode","id","className","kcFormClass","action","registrationAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcInputWrapperClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","name","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","kcInputErrorMessageClass","errorMessage"],"sourceRoot":""}