{"version":3,"file":"static/js/413.6047f876.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/RegisterUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useMemo, memo, useState } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nconst RegisterUserProfile = memo(({ kcContext, i18n, ...props_ }: { kcContext: KcContextBase.RegisterUserProfile; i18n: I18n } & KcProps) => {\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx, css } = useCssAndCx();\n\n    const props = useMemo(\n        () => ({\n            ...props_,\n            \"kcFormGroupClass\": cx(props_.kcFormGroupClass, css({ \"marginBottom\": 20 }))\n        }),\n        [cx, css]\n    );\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={cx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...props} />\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default RegisterUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../../tools/useCssAndCx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { cx, css } = useCssAndCx();\n\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = cx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={cx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={cx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={cx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${cx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={cx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={cx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 && (\n                                        <span\n                                            id={`input-error-${attribute.name}`}\n                                            className={cx(\n                                                props.kcInputErrorMessageClass,\n                                                css({\n                                                    \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined,\n                                                    \"& > span\": { \"display\": \"block\" }\n                                                })\n                                            )}\n                                            aria-live=\"polite\"\n                                        >\n                                            {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["RegisterUserProfile","memo","_a","kcContext","i18n","props_","__rest","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useCssAndCx","cx","css","props","useMemo","Object","kcFormGroupClass","useState","isFomSubmittable","setIsFomSubmittable","React","Template","displayMessage","exists","displayRequiredFields","doFetchDefaultThemeResources","headerNode","formNode","id","className","kcFormClass","action","registrationAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcInputWrapperClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled","BeforeField","AfterField","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","name","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","kcInputErrorMessageClass","errorMessage"],"sourceRoot":""}