{"version":3,"file":"static/js/248.fdb1cbfe.chunk.js","mappings":"mNAOMA,GAAqBC,EAAAA,EAAAA,OAAK,YAAyG,IAAtGC,EAAsG,EAAtGA,UAAWC,EAA2F,EAA3FA,KAASC,GAAkF,YAC7HC,EAAqBH,EAArBG,IAAKC,EAAgBJ,EAAhBI,MAAOC,EAASL,EAATK,KAEZC,EAAgBL,EAAhBK,IAAKC,EAAWN,EAAXM,OAELC,GAAOC,EAAAA,EAAAA,MAAPD,GAER,OACIE,EAAAA,cAACC,EAAAA,GAAD,2BACUX,UAAAA,EAAWC,KAAAA,GAASC,IAD9B,IAEIU,8BAA8B,EAC9BC,gBAAgB,EAChBC,WAAYR,EAAI,oBAChBS,SACIL,EAAAA,cAAAA,OAAAA,CAAMM,GAAG,yBAAyBC,UAAWT,EAAGN,EAAMgB,aAAcC,OAAQhB,EAAIiB,YAAaC,OAAO,QAChGX,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGN,EAAMoB,mBACrBZ,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGN,EAAMqB,sBACrBb,EAAAA,cAAAA,QAAAA,CAAOc,QAAQ,WAAWP,UAAWT,EAAGN,EAAMuB,eACxCrB,EAAMsB,sBAEDtB,EAAMuB,4BAEPrB,EAAI,SADJA,EAAI,mBAFJA,EAAI,cAMlBI,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGN,EAAM0B,sBACrBlB,EAAAA,cAAAA,QAAAA,CACImB,KAAK,OACLb,GAAG,WACHc,KAAK,WACLb,UAAWT,EAAGN,EAAM6B,cACpBC,WAAS,EACTC,kBAAuBC,IAAT7B,GAAsBA,EAAK8B,aAAe9B,EAAK+B,uBAAoBF,MAI7FxB,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGN,EAAMoB,iBAAkBpB,EAAMmC,qBAC7C3B,EAAAA,cAAAA,MAAAA,CAAKM,GAAG,kBAAkBC,UAAWT,EAAGN,EAAMoC,qBAC1C5B,EAAAA,cAAAA,MAAAA,CAAKO,UAAWT,EAAGN,EAAMqC,4BACrB7B,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAG8B,KAAMrC,EAAIsC,UAAWnC,EAAI,mBAKxCI,EAAAA,cAAAA,MAAAA,CAAKM,GAAG,kBAAkBC,UAAWT,EAAGN,EAAMwC,qBAC1ChC,EAAAA,cAAAA,QAAAA,CACIO,UAAWT,EAAGN,EAAMyC,cAAezC,EAAM0C,qBAAsB1C,EAAM2C,mBAAoB3C,EAAM4C,oBAC/FjB,KAAK,SACLkB,MAAOxC,EAAO,iBAMlCyC,SAAU1C,EAAI,sBAGzB,IAED,W","sources":["../node_modules/keycloakify/src/lib/components/LoginResetPassword.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"tss-react\";\nimport type { I18n } from \"../i18n\";\n\nconst LoginResetPassword = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.LoginResetPassword; i18n: I18n } & KcProps) => {\n    const { url, realm, auth } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx } = useCssAndCx();\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayMessage={false}\n            headerNode={msg(\"emailForgotTitle\")}\n            formNode={\n                <form id=\"kc-reset-password-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                {!realm.loginWithEmailAllowed\n                                    ? msg(\"username\")\n                                    : !realm.registrationEmailAsUsername\n                                    ? msg(\"usernameOrEmail\")\n                                    : msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                name=\"username\"\n                                className={cx(props.kcInputClass)}\n                                autoFocus\n                                defaultValue={auth !== undefined && auth.showUsername ? auth.attemptedUsername : undefined}\n                            />\n                        </div>\n                    </div>\n                    <div className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n            infoNode={msg(\"emailInstruction\")}\n        />\n    );\n});\n\nexport default LoginResetPassword;\n"],"names":["LoginResetPassword","memo","kcContext","i18n","props","url","realm","auth","msg","msgStr","cx","useCssAndCx","React","Template","doFetchDefaultThemeResources","displayMessage","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","kcFormGroupClass","kcLabelWrapperClass","htmlFor","kcLabelClass","loginWithEmailAllowed","registrationEmailAsUsername","kcInputWrapperClass","type","name","kcInputClass","autoFocus","defaultValue","undefined","showUsername","attemptedUsername","kcFormSettingClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","infoNode"],"sourceRoot":""}