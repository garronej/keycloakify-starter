{"version":3,"file":"static/js/413.29937f74.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/RegisterUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useMemo, memo, useState } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nexport type RegisterUserProfileProps = KcProps & {\n    kcContext: KcContextBase.RegisterUserProfile;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst RegisterUserProfile = memo((props: RegisterUserProfileProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps_ } = props;\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx, css } = useCssAndCx();\n\n    const kcProps = useMemo(\n        () => ({\n            ...kcProps_,\n            \"kcFormGroupClass\": cx(kcProps_.kcFormGroupClass, css({ \"marginBottom\": 20 }))\n        }),\n        [cx, css]\n    );\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={cx(kcProps.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={cx(kcProps.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(kcProps.kcFormOptionsClass)}>\n                            <div className={cx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={cx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default RegisterUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../../tools/useCssAndCx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { cx, css } = useCssAndCx();\n\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = cx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={cx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={cx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={cx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${cx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={cx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={cx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 && (\n                                        <span\n                                            id={`input-error-${attribute.name}`}\n                                            className={cx(\n                                                props.kcInputErrorMessageClass,\n                                                css({\n                                                    \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined,\n                                                    \"& > span\": { \"display\": \"block\" }\n                                                })\n                                            )}\n                                            aria-live=\"polite\"\n                                        >\n                                            {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["RegisterUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps_","__rest","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useCssAndCx","cx","css","kcProps","useMemo","Object","kcFormGroupClass","useState","isFomSubmittable","setIsFomSubmittable","React","displayMessage","exists","displayRequiredFields","headerNode","formNode","id","className","kcFormClass","action","registrationAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcInputWrapperClass","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled","_a","BeforeField","AfterField","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","name","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","kcInputErrorMessageClass","errorMessage"],"sourceRoot":""}