{"version":3,"file":"static/js/53.5da97620.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/UpdateUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nexport type UpdateUserProfileProps = KcProps & {\n    kcContext: KcContextBase.UpdateUserProfile;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst UpdateUserProfile = memo((props: UpdateUserProfileProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = i18n;\n\n    const { url, isAppInitiatedAction } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"loginProfileTitle\")}\n            formNode={\n                <form id=\"kc-update-profile-form\" className={cx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n\n                    <div className={cx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(kcProps.kcFormOptionsClass)}>\n                            <div className={cx(kcProps.kcFormOptionsWrapperClass)}></div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(kcProps.kcFormButtonsClass)}>\n                            {isAppInitiatedAction ? (\n                                <>\n                                    <input\n                                        className={cx(kcProps.kcButtonClass, kcProps.kcButtonPrimaryClass, kcProps.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        value={msgStr(\"doSubmit\")}\n                                    />\n                                    <button\n                                        className={cx(kcProps.kcButtonClass, kcProps.kcButtonDefaultClass, kcProps.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        name=\"cancel-aia\"\n                                        value=\"true\"\n                                        formNoValidate\n                                    >\n                                        {msg(\"doCancel\")}\n                                    </button>\n                                </>\n                            ) : (\n                                <input\n                                    className={cx(\n                                        kcProps.kcButtonClass,\n                                        kcProps.kcButtonPrimaryClass,\n                                        kcProps.kcButtonBlockClass,\n                                        kcProps.kcButtonLargeClass\n                                    )}\n                                    type=\"submit\"\n                                    defaultValue={msgStr(\"doSubmit\")}\n                                    disabled={!isFomSubmittable}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default UpdateUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../../tools/useCssAndCx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { cx, css } = useCssAndCx();\n\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = cx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={cx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={cx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={cx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${cx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={cx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={cx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 && (\n                                        <span\n                                            id={`input-error-${attribute.name}`}\n                                            className={cx(\n                                                props.kcInputErrorMessageClass,\n                                                css({\n                                                    \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined,\n                                                    \"& > span\": { \"display\": \"block\" }\n                                                })\n                                            )}\n                                            aria-live=\"polite\"\n                                        >\n                                            {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["UpdateUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","__rest","cx","useCssAndCx","msg","msgStr","url","isAppInitiatedAction","useState","isFomSubmittable","setIsFomSubmittable","React","Object","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcFormGroupClass","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","type","value","kcButtonDefaultClass","name","formNoValidate","kcButtonBlockClass","defaultValue","disabled","_a","BeforeField","AfterField","css","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","kcInputErrorMessageClass","errorMessage"],"sourceRoot":""}