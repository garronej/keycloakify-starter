{"version":3,"file":"static/js/332.77d0b53c.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/IdpReviewUserProfile.tsx","../node_modules/keycloakify/src/lib/components/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nexport type IdpReviewUserProfileProps = KcProps & {\n    kcContext: KcContextBase.IdpReviewUserProfile;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst IdpReviewUserProfile = memo((props: IdpReviewUserProfileProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = i18n;\n\n    const { url } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"loginIdpReviewProfileTitle\")}\n            formNode={\n                <form id=\"kc-idp-review-profile-form\" className={cx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n\n                    <div className={cx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(kcProps.kcFormOptionsClass)}>\n                            <div className={cx(kcProps.kcFormOptionsWrapperClass)} />\n                        </div>\n                        <div id=\"kc-form-buttons\" className={cx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={cx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default IdpReviewUserProfile;\n","import React, { memo, useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../../tools/useCssAndCx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18n } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18n;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport const UserProfileFormFields = memo(\n    ({ kcContext, onIsFormSubmittableValueChange, i18n, BeforeField, AfterField, ...props }: UserProfileFormFieldsProps) => {\n        const { cx, css } = useCssAndCx();\n\n        const { advancedMsg } = i18n;\n\n        const {\n            formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n            formValidationReducer,\n            attributesWithPassword\n        } = useFormValidationSlice({\n            kcContext,\n            i18n\n        });\n\n        useEffect(() => {\n            onIsFormSubmittableValueChange(isFormSubmittable);\n        }, [isFormSubmittable]);\n\n        const onChangeFactory = useCallbackFactory(\n            (\n                [name]: [string],\n                [\n                    {\n                        target: { value }\n                    }\n                ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n            ) =>\n                formValidationReducer({\n                    \"action\": \"update value\",\n                    name,\n                    \"newValue\": value\n                })\n        );\n\n        const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n            formValidationReducer({\n                \"action\": \"focus lost\",\n                name\n            })\n        );\n\n        let currentGroup = \"\";\n\n        return (\n            <>\n                {attributesWithPassword.map((attribute, i) => {\n                    const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                    const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                    const formGroupClassName = cx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                    return (\n                        <Fragment key={i}>\n                            {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                                <div className={formGroupClassName}>\n                                    <div className={cx(props.kcContentWrapperClass)}>\n                                        <label id={`header-${group}`} className={cx(props.kcFormGroupHeader)}>\n                                            {advancedMsg(groupDisplayHeader) || currentGroup}\n                                        </label>\n                                    </div>\n                                    {groupDisplayDescription !== \"\" && (\n                                        <div className={cx(props.kcLabelWrapperClass)}>\n                                            <label id={`description-${group}`} className={`${cx(props.kcLabelClass)}`}>\n                                                {advancedMsg(groupDisplayDescription)}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {BeforeField && <BeforeField attribute={attribute} />}\n\n                            <div className={formGroupClassName}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor={attribute.name} className={cx(props.kcLabelClass)}>\n                                        {advancedMsg(attribute.displayName ?? \"\")}\n                                    </label>\n                                    {attribute.required && <>*</>}\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    {(() => {\n                                        const { options } = attribute.validators;\n\n                                        if (options !== undefined) {\n                                            return (\n                                                <select\n                                                    id={attribute.name}\n                                                    name={attribute.name}\n                                                    onChange={onChangeFactory(attribute.name)}\n                                                    onBlur={onBlurFactory(attribute.name)}\n                                                    value={value}\n                                                >\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            );\n                                        }\n\n                                        return (\n                                            <input\n                                                type={(() => {\n                                                    switch (attribute.name) {\n                                                        case \"password-confirm\":\n                                                        case \"password\":\n                                                            return \"password\";\n                                                        default:\n                                                            return \"text\";\n                                                    }\n                                                })()}\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                value={value}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                className={cx(props.kcInputClass)}\n                                                aria-invalid={displayableErrors.length !== 0}\n                                                disabled={attribute.readOnly}\n                                                autoComplete={attribute.autocomplete}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                            />\n                                        );\n                                    })()}\n                                    {displayableErrors.length !== 0 && (\n                                        <span\n                                            id={`input-error-${attribute.name}`}\n                                            className={cx(\n                                                props.kcInputErrorMessageClass,\n                                                css({\n                                                    \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined,\n                                                    \"& > span\": { \"display\": \"block\" }\n                                                })\n                                            )}\n                                            aria-live=\"polite\"\n                                        >\n                                            {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n\n                            {AfterField && <AfterField attribute={attribute} />}\n                        </Fragment>\n                    );\n                })}\n            </>\n        );\n    }\n);\n"],"names":["IdpReviewUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","__rest","cx","useCssAndCx","msg","msgStr","url","useState","isFomSubmittable","setIsFomSubmittable","React","Object","headerNode","formNode","id","className","kcFormClass","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcFormGroupClass","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled","_a","BeforeField","AfterField","css","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","useCallbackFactory","name","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","length","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","undefined","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","kcInputErrorMessageClass","errorMessage"],"sourceRoot":""}