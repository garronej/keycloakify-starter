{"version":3,"file":"static/js/114.dca83769.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/LoginConfigTotp.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"tss-react\";\nimport type { I18n } from \"../i18n\";\n\nconst LoginConfigTotp = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.LoginConfigTotp; i18n: I18n } & KcProps) => {\n    const { url, isAppInitiatedAction, totp, mode, messagesPerField } = kcContext;\n\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = i18n;\n\n    const algToKeyUriAlg: Record<KcContextBase.LoginConfigTotp[\"totp\"][\"policy\"][\"algorithm\"], string> = {\n        HmacSHA1: \"SHA1\",\n        HmacSHA256: \"SHA256\",\n        HmacSHA512: \"SHA512\"\n    };\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"loginTotpTitle\")}\n            formNode={\n                <>\n                    <ol id=\"kc-totp-settings\">\n                        <li>\n                            <p>{msg(\"loginTotpStep1\")}</p>\n\n                            <ul id=\"kc-totp-supported-apps\">\n                                {totp.policy.supportedApplications.map(app => (\n                                    <li>{app}</li>\n                                ))}\n                            </ul>\n                        </li>\n\n                        {mode && mode == \"manual\" ? (\n                            <>\n                                <li>\n                                    <p>{msg(\"loginTotpManualStep2\")}</p>\n                                    <p>\n                                        <span id=\"kc-totp-secret-key\">{totp.totpSecretEncoded}</span>\n                                    </p>\n                                    <p>\n                                        <a href={totp.qrUrl} id=\"mode-barcode\">\n                                            {msg(\"loginTotpScanBarcode\")}\n                                        </a>\n                                    </p>\n                                </li>\n                                <li>\n                                    <p>{msg(\"loginTotpManualStep3\")}</p>\n                                    <p>\n                                        <ul>\n                                            <li id=\"kc-totp-type\">\n                                                {msg(\"loginTotpType\")}: {msg(`loginTotp.${totp.policy.type}`)}\n                                            </li>\n                                            <li id=\"kc-totp-algorithm\">\n                                                {msg(\"loginTotpAlgorithm\")}: {algToKeyUriAlg?.[totp.policy.algorithm] ?? totp.policy.algorithm}\n                                            </li>\n                                            <li id=\"kc-totp-digits\">\n                                                {msg(\"loginTotpDigits\")}: {totp.policy.digits}\n                                            </li>\n                                            {totp.policy.type === \"totp\" ? (\n                                                <li id=\"kc-totp-period\">\n                                                    {msg(\"loginTotpInterval\")}: {totp.policy.period}\n                                                </li>\n                                            ) : (\n                                                <li id=\"kc-totp-counter\">\n                                                    {msg(\"loginTotpCounter\")}: {totp.policy.initialCounter}\n                                                </li>\n                                            )}\n                                        </ul>\n                                    </p>\n                                </li>\n                            </>\n                        ) : (\n                            <li>\n                                <p>{msg(\"loginTotpStep2\")}</p>\n                                <img id=\"kc-totp-secret-qr-code\" src={`data:image/png;base64, ${totp.totpSecretQrCode}`} alt=\"Figure: Barcode\" />\n                                <br />\n                                <p>\n                                    <a href={totp.manualUrl} id=\"mode-manual\">\n                                        {msg(\"loginTotpUnableToScan\")}\n                                    </a>\n                                </p>\n                            </li>\n                        )}\n                        <li>\n                            <p>{msg(\"loginTotpStep3\")}</p>\n                            <p>{msg(\"loginTotpStep3DeviceName\")}</p>\n                        </li>\n                    </ol>\n\n                    <form action={url.loginAction} className={cx(props.kcFormClass)} id=\"kc-totp-settings-form\" method=\"post\">\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <label htmlFor=\"totp\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"authenticatorCode\")}\n                                </label>{\" \"}\n                                <span className=\"required\">*</span>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"totp\"\n                                    name=\"totp\"\n                                    autoComplete=\"off\"\n                                    className={cx(props.kcInputClass)}\n                                    aria-invalid={messagesPerField.existsError(\"totp\")}\n                                />\n\n                                {messagesPerField.existsError(\"totp\") && (\n                                    <span id=\"input-error-otp-code\" className={cx(props.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                        {messagesPerField.get(\"totp\")}\n                                    </span>\n                                )}\n                            </div>\n                            <input type=\"hidden\" id=\"totpSecret\" name=\"totpSecret\" value={totp.totpSecret} />\n                            {mode && <input type=\"hidden\" id=\"mode\" value={mode} />}\n                        </div>\n\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <label htmlFor=\"userLabel\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"loginTotpDeviceName\")}\n                                </label>{\" \"}\n                                {totp.otpCredentials.length >= 1 && <span className=\"required\">*</span>}\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"userLabel\"\n                                    name=\"userLabel\"\n                                    autoComplete=\"off\"\n                                    className={cx(props.kcInputClass)}\n                                    aria-invalid={messagesPerField.existsError(\"userLabel\")}\n                                />\n                                {messagesPerField.existsError(\"userLabel\") && (\n                                    <span id=\"input-error-otp-label\" className={cx(props.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                        {messagesPerField.get(\"userLabel\")}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n\n                        {isAppInitiatedAction ? (\n                            <>\n                                <input\n                                    type=\"submit\"\n                                    className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                    id=\"saveTOTPBtn\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                                <button\n                                    type=\"submit\"\n                                    className={cx(\n                                        props.kcButtonClass,\n                                        props.kcButtonDefaultClass,\n                                        props.kcButtonLargeClass,\n                                        props.kcButtonLargeClass\n                                    )}\n                                    id=\"cancelTOTPBtn\"\n                                    name=\"cancel-aia\"\n                                    value=\"true\"\n                                >\n                                    ${msg(\"doCancel\")}\n                                </button>\n                            </>\n                        ) : (\n                            <input\n                                type=\"submit\"\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                id=\"saveTOTPBtn\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        )}\n                    </form>\n                </>\n            }\n        />\n    );\n});\n\nexport default LoginConfigTotp;\n"],"names":["LoginConfigTotp","memo","kcContext","i18n","props","url","isAppInitiatedAction","totp","mode","messagesPerField","cx","useCssAndCx","msg","msgStr","algToKeyUriAlg","HmacSHA1","HmacSHA256","HmacSHA512","React","Template","doFetchDefaultThemeResources","headerNode","formNode","id","policy","supportedApplications","map","app","totpSecretEncoded","href","qrUrl","type","algorithm","digits","period","initialCounter","src","totpSecretQrCode","alt","manualUrl","action","loginAction","className","kcFormClass","method","kcFormGroupClass","kcInputWrapperClass","htmlFor","kcLabelClass","name","autoComplete","kcInputClass","existsError","kcInputErrorMessageClass","get","value","totpSecret","otpCredentials","length","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","kcButtonDefaultClass"],"sourceRoot":""}