{"version":3,"file":"static/js/114.98cff581.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/LoginConfigTotp.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport type { I18n } from \"../i18n\";\n\nconst LoginConfigTotp = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.LoginConfigTotp; i18n: I18n } & KcProps) => {\n    const { url, isAppInitiatedAction, totp, mode, messagesPerField } = kcContext;\n\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = i18n;\n\n    const algToKeyUriAlg: Record<KcContextBase.LoginConfigTotp[\"totp\"][\"policy\"][\"algorithm\"], string> = {\n        HmacSHA1: \"SHA1\",\n        HmacSHA256: \"SHA256\",\n        HmacSHA512: \"SHA512\"\n    };\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"loginTotpTitle\")}\n            formNode={\n                <>\n                    <ol id=\"kc-totp-settings\">\n                        <li>\n                            <p>{msg(\"loginTotpStep1\")}</p>\n\n                            <ul id=\"kc-totp-supported-apps\">\n                                {totp.policy.supportedApplications.map(app => (\n                                    <li>{app}</li>\n                                ))}\n                            </ul>\n                        </li>\n\n                        {mode && mode == \"manual\" ? (\n                            <>\n                                <li>\n                                    <p>{msg(\"loginTotpManualStep2\")}</p>\n                                    <p>\n                                        <span id=\"kc-totp-secret-key\">{totp.totpSecretEncoded}</span>\n                                    </p>\n                                    <p>\n                                        <a href={totp.qrUrl} id=\"mode-barcode\">\n                                            {msg(\"loginTotpScanBarcode\")}\n                                        </a>\n                                    </p>\n                                </li>\n                                <li>\n                                    <p>{msg(\"loginTotpManualStep3\")}</p>\n                                    <p>\n                                        <ul>\n                                            <li id=\"kc-totp-type\">\n                                                {msg(\"loginTotpType\")}: {msg(`loginTotp.${totp.policy.type}`)}\n                                            </li>\n                                            <li id=\"kc-totp-algorithm\">\n                                                {msg(\"loginTotpAlgorithm\")}: {algToKeyUriAlg?.[totp.policy.algorithm] ?? totp.policy.algorithm}\n                                            </li>\n                                            <li id=\"kc-totp-digits\">\n                                                {msg(\"loginTotpDigits\")}: {totp.policy.digits}\n                                            </li>\n                                            {totp.policy.type === \"totp\" ? (\n                                                <li id=\"kc-totp-period\">\n                                                    {msg(\"loginTotpInterval\")}: {totp.policy.period}\n                                                </li>\n                                            ) : (\n                                                <li id=\"kc-totp-counter\">\n                                                    {msg(\"loginTotpCounter\")}: {totp.policy.initialCounter}\n                                                </li>\n                                            )}\n                                        </ul>\n                                    </p>\n                                </li>\n                            </>\n                        ) : (\n                            <li>\n                                <p>{msg(\"loginTotpStep2\")}</p>\n                                <img id=\"kc-totp-secret-qr-code\" src={`data:image/png;base64, ${totp.totpSecretQrCode}`} alt=\"Figure: Barcode\" />\n                                <br />\n                                <p>\n                                    <a href={totp.manualUrl} id=\"mode-manual\">\n                                        {msg(\"loginTotpUnableToScan\")}\n                                    </a>\n                                </p>\n                            </li>\n                        )}\n                        <li>\n                            <p>{msg(\"loginTotpStep3\")}</p>\n                            <p>{msg(\"loginTotpStep3DeviceName\")}</p>\n                        </li>\n                    </ol>\n\n                    <form action={url.loginAction} className={cx(props.kcFormClass)} id=\"kc-totp-settings-form\" method=\"post\">\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <label htmlFor=\"totp\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"authenticatorCode\")}\n                                </label>{\" \"}\n                                <span className=\"required\">*</span>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"totp\"\n                                    name=\"totp\"\n                                    autoComplete=\"off\"\n                                    className={cx(props.kcInputClass)}\n                                    aria-invalid={messagesPerField.existsError(\"totp\")}\n                                />\n\n                                {messagesPerField.existsError(\"totp\") && (\n                                    <span id=\"input-error-otp-code\" className={cx(props.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                        {messagesPerField.get(\"totp\")}\n                                    </span>\n                                )}\n                            </div>\n                            <input type=\"hidden\" id=\"totpSecret\" name=\"totpSecret\" value={totp.totpSecret} />\n                            {mode && <input type=\"hidden\" id=\"mode\" value={mode} />}\n                        </div>\n\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <label htmlFor=\"userLabel\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"loginTotpDeviceName\")}\n                                </label>{\" \"}\n                                {totp.otpCredentials.length >= 1 && <span className=\"required\">*</span>}\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"userLabel\"\n                                    name=\"userLabel\"\n                                    autoComplete=\"off\"\n                                    className={cx(props.kcInputClass)}\n                                    aria-invalid={messagesPerField.existsError(\"userLabel\")}\n                                />\n                                {messagesPerField.existsError(\"userLabel\") && (\n                                    <span id=\"input-error-otp-label\" className={cx(props.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                        {messagesPerField.get(\"userLabel\")}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n\n                        {isAppInitiatedAction ? (\n                            <>\n                                <input\n                                    type=\"submit\"\n                                    className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                    id=\"saveTOTPBtn\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                                <button\n                                    type=\"submit\"\n                                    className={cx(\n                                        props.kcButtonClass,\n                                        props.kcButtonDefaultClass,\n                                        props.kcButtonLargeClass,\n                                        props.kcButtonLargeClass\n                                    )}\n                                    id=\"cancelTOTPBtn\"\n                                    name=\"cancel-aia\"\n                                    value=\"true\"\n                                >\n                                    ${msg(\"doCancel\")}\n                                </button>\n                            </>\n                        ) : (\n                            <input\n                                type=\"submit\"\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                id=\"saveTOTPBtn\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        )}\n                    </form>\n                </>\n            }\n        />\n    );\n});\n\nexport default LoginConfigTotp;\n"],"names":["LoginConfigTotp","memo","_a","kcContext","i18n","props","__rest","url","isAppInitiatedAction","totp","mode","messagesPerField","cx","useCssAndCx","msg","msgStr","algToKeyUriAlg","HmacSHA1","HmacSHA256","HmacSHA512","React","Template","Object","doFetchDefaultThemeResources","headerNode","formNode","id","policy","supportedApplications","map","app","totpSecretEncoded","href","qrUrl","type","algorithm","_b","digits","period","initialCounter","src","totpSecretQrCode","alt","manualUrl","action","loginAction","className","kcFormClass","method","kcFormGroupClass","kcInputWrapperClass","htmlFor","kcLabelClass","name","autoComplete","kcInputClass","existsError","kcInputErrorMessageClass","get","value","totpSecret","otpCredentials","length","kcButtonClass","kcButtonPrimaryClass","kcButtonLargeClass","kcButtonDefaultClass"],"sourceRoot":""}