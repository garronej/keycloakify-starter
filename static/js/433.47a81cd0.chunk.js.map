{"version":3,"file":"static/js/433.47a81cd0.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/LoginUsername.tsx"],"sourcesContent":["import React, { useState, memo } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"../tools/useCssAndCx\";\nimport { useConstCallback } from \"powerhooks/useConstCallback\";\nimport type { FormEventHandler } from \"react\";\nimport type { I18n } from \"../i18n\";\n\nexport type LoginUsernameProps = KcProps & {\n    kcContext: KcContextBase.LoginUsername;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst LoginUsername = memo((props: LoginUsernameProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { social, realm, url, usernameHidden, login, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx } = useCssAndCx();\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            formNode={\n                <div id=\"kc-form\" className={cx(realm.password && social.providers !== undefined && kcProps.kcContentWrapperClass)}>\n                    <div\n                        id=\"kc-form-wrapper\"\n                        className={cx(\n                            realm.password && social.providers && [kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass]\n                        )}\n                    >\n                        {realm.password && (\n                            <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                                <div className={cx(kcProps.kcFormGroupClass)}>\n                                    {!usernameHidden &&\n                                        (() => {\n                                            const label = !realm.loginWithEmailAllowed\n                                                ? \"username\"\n                                                : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                            const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                            return (\n                                                <>\n                                                    <label htmlFor={autoCompleteHelper} className={cx(kcProps.kcLabelClass)}>\n                                                        {msg(label)}\n                                                    </label>\n                                                    <input\n                                                        tabIndex={1}\n                                                        id={autoCompleteHelper}\n                                                        className={cx(kcProps.kcInputClass)}\n                                                        //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                        //the browser how to pre fill the form but before submit we put it back\n                                                        //to username because it is what keycloak expects.\n                                                        name={autoCompleteHelper}\n                                                        defaultValue={login.username ?? \"\"}\n                                                        type=\"text\"\n                                                        autoFocus={true}\n                                                        autoComplete=\"off\"\n                                                    />\n                                                </>\n                                            );\n                                        })()}\n                                </div>\n                                <div className={cx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\n                                    <div id=\"kc-form-options\">\n                                        {realm.rememberMe && !usernameHidden && (\n                                            <div className=\"checkbox\">\n                                                <label>\n                                                    <input\n                                                        tabIndex={3}\n                                                        id=\"rememberMe\"\n                                                        name=\"rememberMe\"\n                                                        type=\"checkbox\"\n                                                        {...(login.rememberMe\n                                                            ? {\n                                                                  \"checked\": true\n                                                              }\n                                                            : {})}\n                                                    />\n                                                    {msg(\"rememberMe\")}\n                                                </label>\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                                <div id=\"kc-form-buttons\" className={cx(kcProps.kcFormGroupClass)}>\n                                    <input\n                                        tabIndex={4}\n                                        className={cx(\n                                            kcProps.kcButtonClass,\n                                            kcProps.kcButtonPrimaryClass,\n                                            kcProps.kcButtonBlockClass,\n                                            kcProps.kcButtonLargeClass\n                                        )}\n                                        name=\"login\"\n                                        id=\"kc-login\"\n                                        type=\"submit\"\n                                        value={msgStr(\"doLogIn\")}\n                                        disabled={isLoginButtonDisabled}\n                                    />\n                                </div>\n                            </form>\n                        )}\n                    </div>\n                    {realm.password && social.providers !== undefined && (\n                        <div id=\"kc-social-providers\" className={cx(kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass)}>\n                            <ul\n                                className={cx(\n                                    kcProps.kcFormSocialAccountListClass,\n                                    social.providers.length > 4 && kcProps.kcFormSocialAccountDoubleListClass\n                                )}\n                            >\n                                {social.providers.map(p => (\n                                    <li key={p.providerId} className={cx(kcProps.kcFormSocialAccountListLinkClass)}>\n                                        <a href={p.loginUrl} id={`zocial-${p.alias}`} className={cx(\"zocial\", p.providerId)}>\n                                            <span>{p.displayName}</span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </div>\n            }\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        />\n    );\n});\n\nexport default LoginUsername;\n"],"names":["LoginUsername","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","__rest","social","realm","url","usernameHidden","login","registrationDisabled","msg","msgStr","cx","useCssAndCx","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","_a","setAttribute","submit","React","Object","displayInfo","displayWide","password","undefined","providers","headerNode","formNode","id","className","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","tabIndex","kcInputClass","name","defaultValue","username","type","autoFocus","autoComplete","kcFormSettingClass","rememberMe","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value","disabled","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","key","providerId","kcFormSocialAccountListLinkClass","href","loginUrl","alias","displayName","infoNode","registrationAllowed","registrationUrl"],"sourceRoot":""}