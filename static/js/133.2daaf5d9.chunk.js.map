{"version":3,"file":"static/js/133.2daaf5d9.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/components/Register.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"tss-react\";\nimport type { I18n } from \"../i18n\";\n\nconst Register = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.Register; i18n: I18n } & KcProps) => {\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx } = useCssAndCx();\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={cx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={cx(props.kcInputClass)}\n                                name=\"firstName\"\n                                defaultValue={register.formData.firstName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={cx(props.kcInputClass)}\n                                name=\"lastName\"\n                                defaultValue={register.formData.lastName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"email\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={cx(props.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className={cx(props.kcInputClass)}\n                                name=\"email\"\n                                defaultValue={register.formData.email ?? \"\"}\n                                autoComplete=\"email\"\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"username\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={cx(props.kcInputClass)}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password\", props.kcFormGroupErrorClass))}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={cx(props.kcInputClass)}\n                                        name=\"password\"\n                                        autoComplete=\"new-password\"\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={cx(\n                                    props.kcFormGroupClass,\n                                    messagesPerField.printIfExists(\"password-confirm\", props.kcFormGroupErrorClass)\n                                )}\n                            >\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password-confirm\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"passwordConfirm\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input type=\"password\" id=\"password-confirm\" className={cx(props.kcInputClass)} name=\"password-confirm\" />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default Register;\n"],"names":["Register","memo","kcContext","i18n","props","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","cx","useCssAndCx","React","Template","doFetchDefaultThemeResources","headerNode","formNode","id","className","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","lastName","email","autoComplete","registrationEmailAsUsername","username","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value"],"sourceRoot":""}